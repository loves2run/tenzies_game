* {
    box-sizing: border-box;
}

body {
    margin: 0;
    font-family: Inter, sans-serif;
}

div#root {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #0B2434;
}

main {
    width: min(80vw, 800px); 
    height: 0;
    padding-bottom: min(80vw, 800px);
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #f5f5f5;
    border-radius: 5px;
}

/* Above, I used a trick I learned from Claude for creating a responsive
perfect square.
- used min() function to set both width and padding-bottom to the smaller
of 80% viewport width or 400px
- it's the padding bottom trick that creates the perfect square by making
height proportional to the width
- the vw unit ensures responsivity as screen size changes
- setting the container with position relative and content with position
allows me to place content inside teh square appropriately! */

.mainContent {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
}

.diceContainer {
    display: grid;
    grid-template: auto auto / repeat(5, 1fr);
    gap: 20px;
}

.diceContainer button {
    /* padding: 0;
    aspect-ratio: 1; */
    height: 75px;
    width: 75px;
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 1.15);
    border-radius: 10px;
    border: none;
    background-color: #fff;
    font-family: Inter, sans-serif;
    font-size: 1.75rem;
    font-weight: bold;
    cursor: pointer;
}